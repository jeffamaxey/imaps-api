version: "3"
services:
  postgres:
    hostname: postgres
    container_name: imaps_postgres
    image: postgres:13.4-buster
    env_file:
      - secrets.env
    volumes:
      - postgres_data:/var/lib/postgresql/data
  pgbackups:
    hostname: backups
    container_name: imaps_backups
    image: prodrigestivill/postgres-backup-local
    restart: always
    user: postgres:postgres
    volumes:
      - postgres_backups:/backups
    depends_on:
      - postgres
    env_file:
      - secrets.env
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_DB=postgres
      - POSTGRES_USER=postgres
      - SCHEDULE=@daily
      - BACKUP_KEEP_DAYS=7
      - BACKUP_KEEP_WEEKS=4
      - BACKUP_KEEP_MONTHS=6
      - HEALTHCHECK_PORT=8080
  broker:
    hostname: broker
    container_name: imaps_broker
    image: rabbitmq:latest
  worker:
    hostname: worker
    container_name: imaps_worker
    env_file:
      - secrets.env
    environment:
      - DEBUG=no
      - DB_ENGINE=django.db.backends.postgresql_psycopg2
      - DB_NAME=postgres
      - DB_USER=postgres
      - DB_HOST=postgres
      - CELERY_BROKER_URL=amqp://guest@broker:5672//
      - NEXTFLOW_PIPELINE_ROOT=/home/app/nextflow
    build:
      context: .
    depends_on:
      - broker
      - postgres
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command: ["celery", "-A", "analysis.celery", "worker", "-l", "INFO"]
  api:
    hostname: api
    container_name: imaps_api
    env_file:
      - secrets.env
    user: "goodwright"
    expose:
      - 8000
    environment:
      - DEBUG=no
      - DB_ENGINE=django.db.backends.postgresql_psycopg2
      - DB_NAME=postgres
      - DB_USER=postgres
      - DB_HOST=postgres
      - BROKER_URL=amqp://guest@broker:5672//
      - MEDIA_ROOT=/home/app/media
      - NEXTFLOW_PIPELINE_ROOT=/home/app/nextflow
      - PEKA_ROOT=/home/app/peka/data
    depends_on:
      - postgres
      - broker
    volumes:
      - media:/home/app/media
    build:
        context: .
    command: bash -c "python manage.py migrate && gunicorn --bind :8000 core.wsgi:application --log-level debug --timeout 600"
  files:
    hostname: files
    container_name: imaps_files
    depends_on:
      - api
    expose:
      - 80
    volumes:
      - media:/home/app/media
    build:
      context: nginx
      dockerfile: Dockerfile.nginx

volumes:
  postgres_data:
  postgres_backups:
  media:

  
      